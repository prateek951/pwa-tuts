Service Workers 

They do a lot of work behind the scenes

Make our application work offline ready even in the absence of internet connection.

They allow us to use most of the next generation features of modern web applications 
like push notifications,background synchronisation 

Service workers are also single threaded as they run in the background 
and they are decoupled from the html pages .It is registered under HTML page 
It has certain scope where it applies to (all pages of a domain)
Service workers live even after all the pages have been closed in your application. 
Service workers can listen to events emittted by the javascript code or raised from 
the DOM or by some other server via the web push notifications.

Sits there in background react to all kinds of incoming events like return cached 
results

Listenable Events in Service Workers

Fetch       Browser or Page related JS initiates a fetch (http request)
            We can react to that event using the service workers.Service workers
            trigger the events when the fetch request occurs which goes through 
            the service worker to the server and gets the data from the server.
            Native XMLHttpRequest and the axios requests dont trigger the fetch 
            events.Since most events go through the service workers, you can 
            manipulate them, block them and control and cache them 

Push notifications  Send from other server .These vendor service from the browser 
                    sender will send you the push notification to the client 
                    application running and can in Service Worker you can listen
                    to the incoming push request.Service workers are running in  
                    background 

Notification interaction        User interacts with displayed notification 
                                Service workers always run though the tab of
                                browser may not run though.

Background synchronisation      Suppose you issued a post request to store 
                                some data on server and the internet connection 
                                failed.In that case browsers with this feature 
                                will preserve the action that causes this side 
                                effect of posting data, and will initiate the action 
                                once the connection is restored and establishes the 
                                emission of event of Background Sync which the service 
                                worker can listen once the connection is restored.

                                That means the action is cached and once the connection 
                                is restored the action is dispatched/emitted and the service
                                worker can listen to the event then.

Service worker lifecycle        Service worker phase changes'


This is not the javascript code that we want to run but the background process.


Service Worker Lifecycle 

index.html loads the app.js where you can register the service worker 
in sw.js (content of sw.js is javascript dont fire it right now please take 
it and register it as a background process as a service worker)
During registration

browser installs the service worker and emits the Install Event which we 
can hook it into inside when it is getting installed 
After installation service worker gets activated might not right after the  
installation depends whether an old version of the service worker is running 
In that case activate Event is fired. Service worker now controls all the pages 
of scope 

Browser will install the service worker update to be precise if its a 
new version of the service worker Otherwise if there are no changes in the 
file it wont go for installation phase and not on every page refresh 

Idle Since its a background process, if no events are coming in it will stay 
idle 

After this it will get terminated(Events will wake up the service worker)


Service Workers

Service workers is now supported in all the browsers

Service worker is only served in case of HTTPS and not http
as well as on localhost only for the reason so that the development process 
can be made easy.

Service workers have a lot of power and served on secure applications.

Service Workers require SSL and HTTPS 

Is the Service Worker installed everytime I refresh the page?

No, whilst the browser does of course (naturally) execute the register()  code everytime you refresh the page, it won't install the service worker if the service worker file hasn't changed. If it only changed by 1 byte though, it'll install it as a new service worker (but wait with the activation as explained).

Can I unregister a Service Worker?

Yes, this is possible, the following code does the trick:
navigator.serviceWorker.getRegistrations().then(function(registrations) {
 for(let registration of registrations) {
  registration.unregister()
} })

My app behaves strangely/ A new Service Worker isn't getting installed.

It probably gets installed but you still have some tab/ window with your app open (in one and the same browser). New service workers don't activate before all tabs/ windows with your app running in it are closed. Make sure to do that and then try again.

Can I have multiple 'fetch' listeners in a service worker?

Yes, this is possible.

Can I have multiple service workers on a page?

Yes, but only with different scopes. You can use a service worker for the /help "subdirectory" and one for the rest of your app. The more specific service worker (=> /help) overwrites the other one for its scope.

Can Service Workers communicate with my Page/ the "normal" JavaScript code there?

Yes, that's possible using messages. Have a look at the following thread for more infos: http://craig-russell.co.uk/2016/01/29/service-worker-messaging.html#.WagROdMjF7M
This is actually not Service Worker specific, it applies to all Web Workers.

What's the difference between Web Workers and Service Workers?

Service Workers are a special type of Web Workers. Web Workers also run on a background thread, decoupled from the DOM. They don't keep on living after the page is closed though. The Service Worker on the other hand, keeps on running (depending on the operating system) and also is decoupled from an individual page. 





















